{"ast":null,"code":"const logger = require('debug')('jwks');\n\nconst {\n  retrieveSigningKeys\n} = require('./utils');\n\nconst {\n  request,\n  cacheSigningKey,\n  rateLimitSigningKey,\n  getKeysInterceptor,\n  callbackSupport\n} = require('./wrappers');\n\nconst JwksError = require('./errors/JwksError');\n\nconst SigningKeyNotFoundError = require('./errors/SigningKeyNotFoundError');\n\nclass JwksClient {\n  constructor(options) {\n    this.options = {\n      rateLimit: false,\n      cache: true,\n      timeout: 30000,\n      ...options\n    }; // Initialize wrappers.\n\n    if (this.options.getKeysInterceptor) {\n      this.getSigningKey = getKeysInterceptor(this, options);\n    }\n\n    if (this.options.rateLimit) {\n      this.getSigningKey = rateLimitSigningKey(this, options);\n    }\n\n    if (this.options.cache) {\n      this.getSigningKey = cacheSigningKey(this, options);\n    }\n\n    this.getSigningKey = callbackSupport(this, options);\n  }\n\n  async getKeys() {\n    logger(`Fetching keys from '${this.options.jwksUri}'`);\n\n    try {\n      const res = await request({\n        uri: this.options.jwksUri,\n        headers: this.options.requestHeaders,\n        agent: this.options.requestAgent,\n        timeout: this.options.timeout,\n        fetcher: this.options.fetcher\n      });\n      logger('Keys:', res.keys);\n      return res.keys;\n    } catch (err) {\n      const {\n        errorMsg\n      } = err;\n      logger('Failure:', errorMsg || err);\n      throw errorMsg ? new JwksError(errorMsg) : err;\n    }\n  }\n\n  async getSigningKeys() {\n    const keys = await this.getKeys();\n\n    if (!keys || !keys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any keys');\n    }\n\n    const signingKeys = retrieveSigningKeys(keys);\n\n    if (!signingKeys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any signing keys');\n    }\n\n    logger('Signing Keys:', signingKeys);\n    return signingKeys;\n  }\n\n  async getSigningKey(kid) {\n    logger(`Fetching signing key for '${kid}'`);\n    const keys = await this.getSigningKeys();\n    const kidDefined = kid !== undefined && kid !== null;\n\n    if (!kidDefined && keys.length > 1) {\n      logger('No KID specified and JWKS endpoint returned more than 1 key');\n      throw new SigningKeyNotFoundError('No KID specified and JWKS endpoint returned more than 1 key');\n    }\n\n    const key = keys.find(k => !kidDefined || k.kid === kid);\n\n    if (key) {\n      return key;\n    } else {\n      logger(`Unable to find a signing key that matches '${kid}'`);\n      throw new SigningKeyNotFoundError(`Unable to find a signing key that matches '${kid}'`);\n    }\n  }\n\n}\n\nmodule.exports = {\n  JwksClient\n};","map":{"version":3,"sources":["C:/Users/zhuji/Desktop/heroku_sample/starter/Frontend/node_modules/jwks-rsa/src/JwksClient.js"],"names":["logger","require","retrieveSigningKeys","request","cacheSigningKey","rateLimitSigningKey","getKeysInterceptor","callbackSupport","JwksError","SigningKeyNotFoundError","JwksClient","constructor","options","rateLimit","cache","timeout","getSigningKey","getKeys","jwksUri","res","uri","headers","requestHeaders","agent","requestAgent","fetcher","keys","err","errorMsg","getSigningKeys","length","signingKeys","kid","kidDefined","undefined","key","find","k","module","exports"],"mappings":"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","sourcesContent":["const logger = require('debug')('jwks');\nconst { retrieveSigningKeys } = require('./utils') ;\nconst { request, cacheSigningKey, rateLimitSigningKey, getKeysInterceptor, callbackSupport } = require('./wrappers');\nconst JwksError = require('./errors/JwksError');\nconst SigningKeyNotFoundError = require('./errors/SigningKeyNotFoundError');\n\nclass JwksClient {\n  constructor(options) {\n    this.options = {\n      rateLimit: false,\n      cache: true,\n      timeout: 30000,\n      ...options\n    };\n\n    // Initialize wrappers.\n    if (this.options.getKeysInterceptor) {\n      this.getSigningKey = getKeysInterceptor(this, options);\n    }\n\n    if (this.options.rateLimit) {\n      this.getSigningKey = rateLimitSigningKey(this, options);\n    }\n    if (this.options.cache) {\n      this.getSigningKey = cacheSigningKey(this, options);\n    }\n\n    this.getSigningKey = callbackSupport(this, options);\n  }\n\n  async getKeys() {\n    logger(`Fetching keys from '${this.options.jwksUri}'`);\n\n    try {\n      const res = await request({\n        uri: this.options.jwksUri,\n        headers: this.options.requestHeaders,\n        agent: this.options.requestAgent,\n        timeout: this.options.timeout,\n        fetcher: this.options.fetcher\n      });\n\n      logger('Keys:', res.keys);\n      return res.keys;\n    } catch (err) {\n      const { errorMsg } = err;\n      logger('Failure:', errorMsg || err);\n      throw (errorMsg ? new JwksError(errorMsg) : err);\n    }\n  }\n\n  async getSigningKeys() {\n    const keys = await this.getKeys();\n\n    if (!keys || !keys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any keys');\n    }\n\n    const signingKeys = retrieveSigningKeys(keys);\n\n    if (!signingKeys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any signing keys');\n    }\n\n    logger('Signing Keys:', signingKeys);\n    return signingKeys;\n  }\n\n  async getSigningKey (kid) {\n    logger(`Fetching signing key for '${kid}'`);\n    const keys = await this.getSigningKeys();\n\n    const kidDefined = kid !== undefined && kid !== null;\n    if (!kidDefined && keys.length > 1) {\n      logger('No KID specified and JWKS endpoint returned more than 1 key');\n      throw new SigningKeyNotFoundError('No KID specified and JWKS endpoint returned more than 1 key');\n    }\n\n    const key = keys.find(k => !kidDefined || k.kid === kid);\n    if (key) {\n      return key;\n    } else {\n      logger(`Unable to find a signing key that matches '${kid}'`);\n      throw new SigningKeyNotFoundError(`Unable to find a signing key that matches '${kid}'`);\n    }\n  }\n}\n\nmodule.exports = {\n  JwksClient\n};\n"]},"metadata":{},"sourceType":"script"}