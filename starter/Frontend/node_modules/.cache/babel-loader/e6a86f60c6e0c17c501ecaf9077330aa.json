{"ast":null,"code":"const {\n  createSign,\n  createVerify,\n  constants\n} = require('crypto');\n\nconst {\n  KEYOBJECT\n} = require('../help/consts');\n\nconst resolveNodeAlg = require('../help/node_alg');\n\nconst {\n  asInput\n} = require('../help/key_object');\n\nconst sign = (nodeAlg, _ref, payload) => {\n  let {\n    [KEYOBJECT]: keyObject\n  } = _ref;\n  const key = asInput(keyObject, false);\n  return createSign(nodeAlg).update(payload).sign({\n    key,\n    padding: constants.RSA_PKCS1_PSS_PADDING,\n    saltLength: constants.RSA_PSS_SALTLEN_DIGEST\n  });\n};\n\nconst verify = (nodeAlg, _ref2, payload, signature) => {\n  let {\n    [KEYOBJECT]: keyObject\n  } = _ref2;\n  const key = asInput(keyObject, true);\n  return createVerify(nodeAlg).update(payload).verify({\n    key,\n    padding: constants.RSA_PKCS1_PSS_PADDING,\n    saltLength: constants.RSA_PSS_SALTLEN_DIGEST\n  }, signature);\n};\n\nconst LENGTHS = {\n  PS256: 528,\n  PS384: 784,\n  PS512: 1040\n};\n\nmodule.exports = (JWA, JWK) => {\n  ['PS256', 'PS384', 'PS512'].forEach(jwaAlg => {\n    const nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg));\n\n    JWK.RSA.sign[jwaAlg] = key => key.private && JWK.RSA.verify[jwaAlg](key);\n\n    JWK.RSA.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg];\n  });\n};","map":{"version":3,"sources":["C:/Users/zhuji/Desktop/heroku_sample/starter/Frontend/node_modules/jose/lib/jwa/rsassa_pss.js"],"names":["createSign","createVerify","constants","require","KEYOBJECT","resolveNodeAlg","asInput","sign","nodeAlg","payload","keyObject","key","update","padding","RSA_PKCS1_PSS_PADDING","saltLength","RSA_PSS_SALTLEN_DIGEST","verify","signature","LENGTHS","PS256","PS384","PS512","module","exports","JWA","JWK","forEach","jwaAlg","set","bind","undefined","RSA","private","use","length"],"mappings":"AAAA,MAAM;AACJA,EAAAA,UADI;AAEJC,EAAAA,YAFI;AAGJC,EAAAA;AAHI,IAIFC,OAAO,CAAC,QAAD,CAJX;;AAMA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAC,oBAAD,CAA3B;;AAEA,MAAMI,IAAI,GAAG,CAACC,OAAD,QAAsCC,OAAtC,KAAkD;AAAA,MAAxC;AAAE,KAACL,SAAD,GAAaM;AAAf,GAAwC;AAC7D,QAAMC,GAAG,GAAGL,OAAO,CAACI,SAAD,EAAY,KAAZ,CAAnB;AACA,SAAOV,UAAU,CAACQ,OAAD,CAAV,CAAoBI,MAApB,CAA2BH,OAA3B,EAAoCF,IAApC,CAAyC;AAC9CI,IAAAA,GAD8C;AAE9CE,IAAAA,OAAO,EAAEX,SAAS,CAACY,qBAF2B;AAG9CC,IAAAA,UAAU,EAAEb,SAAS,CAACc;AAHwB,GAAzC,CAAP;AAKD,CAPD;;AASA,MAAMC,MAAM,GAAG,CAACT,OAAD,SAAsCC,OAAtC,EAA+CS,SAA/C,KAA6D;AAAA,MAAnD;AAAE,KAACd,SAAD,GAAaM;AAAf,GAAmD;AAC1E,QAAMC,GAAG,GAAGL,OAAO,CAACI,SAAD,EAAY,IAAZ,CAAnB;AACA,SAAOT,YAAY,CAACO,OAAD,CAAZ,CAAsBI,MAAtB,CAA6BH,OAA7B,EAAsCQ,MAAtC,CAA6C;AAClDN,IAAAA,GADkD;AAElDE,IAAAA,OAAO,EAAEX,SAAS,CAACY,qBAF+B;AAGlDC,IAAAA,UAAU,EAAEb,SAAS,CAACc;AAH4B,GAA7C,EAIJE,SAJI,CAAP;AAKD,CAPD;;AASA,MAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,GADO;AAEdC,EAAAA,KAAK,EAAE,GAFO;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAhB;;AAMAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,GAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4BC,OAA5B,CAAqCC,MAAD,IAAY;AAC9C,UAAMpB,OAAO,GAAGH,cAAc,CAACuB,MAAD,CAA9B;AACAH,IAAAA,GAAG,CAAClB,IAAJ,CAASsB,GAAT,CAAaD,MAAb,EAAqBrB,IAAI,CAACuB,IAAL,CAAUC,SAAV,EAAqBvB,OAArB,CAArB;AACAiB,IAAAA,GAAG,CAACR,MAAJ,CAAWY,GAAX,CAAeD,MAAf,EAAuBX,MAAM,CAACa,IAAP,CAAYC,SAAZ,EAAuBvB,OAAvB,CAAvB;;AACAkB,IAAAA,GAAG,CAACM,GAAJ,CAAQzB,IAAR,CAAaqB,MAAb,IAAuBjB,GAAG,IAAIA,GAAG,CAACsB,OAAJ,IAAeP,GAAG,CAACM,GAAJ,CAAQf,MAAR,CAAeW,MAAf,EAAuBjB,GAAvB,CAA7C;;AACAe,IAAAA,GAAG,CAACM,GAAJ,CAAQf,MAAR,CAAeW,MAAf,IAAyBjB,GAAG,IAAI,CAACA,GAAG,CAACuB,GAAJ,KAAY,KAAZ,IAAqBvB,GAAG,CAACuB,GAAJ,KAAYH,SAAlC,KAAgDpB,GAAG,CAACwB,MAAJ,IAAchB,OAAO,CAACS,MAAD,CAArG;AACD,GAND;AAOD,CARD","sourcesContent":["const {\n  createSign,\n  createVerify,\n  constants\n} = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst resolveNodeAlg = require('../help/node_alg')\nconst { asInput } = require('../help/key_object')\n\nconst sign = (nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n  const key = asInput(keyObject, false)\n  return createSign(nodeAlg).update(payload).sign({\n    key,\n    padding: constants.RSA_PKCS1_PSS_PADDING,\n    saltLength: constants.RSA_PSS_SALTLEN_DIGEST\n  })\n}\n\nconst verify = (nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n  const key = asInput(keyObject, true)\n  return createVerify(nodeAlg).update(payload).verify({\n    key,\n    padding: constants.RSA_PKCS1_PSS_PADDING,\n    saltLength: constants.RSA_PSS_SALTLEN_DIGEST\n  }, signature)\n}\n\nconst LENGTHS = {\n  PS256: 528,\n  PS384: 784,\n  PS512: 1040\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['PS256', 'PS384', 'PS512'].forEach((jwaAlg) => {\n    const nodeAlg = resolveNodeAlg(jwaAlg)\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg))\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg))\n    JWK.RSA.sign[jwaAlg] = key => key.private && JWK.RSA.verify[jwaAlg](key)\n    JWK.RSA.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg]\n  })\n}\n"]},"metadata":{},"sourceType":"script"}