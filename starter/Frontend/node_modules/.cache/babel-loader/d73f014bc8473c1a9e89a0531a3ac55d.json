{"ast":null,"code":"const {\n  generateKeyPairSync,\n  generateKeyPair: async\n} = require('crypto');\n\nconst {\n  promisify\n} = require('util');\n\nconst {\n  THUMBPRINT_MATERIAL,\n  JWK_MEMBERS,\n  PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT,\n  KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts');\n\nconst {\n  OKP_CURVES\n} = require('../../registry');\n\nconst {\n  edDSASupported\n} = require('../../help/runtime_support');\n\nconst errors = require('../../errors');\n\nconst Key = require('./base');\n\nconst generateKeyPair = promisify(async);\nconst OKP_PUBLIC = new Set(['crv', 'x']);\nObject.freeze(OKP_PUBLIC);\nconst OKP_PRIVATE = new Set([...OKP_PUBLIC, 'd']);\nObject.freeze(OKP_PRIVATE); // Octet string key pairs Key Type\n\nclass OKPKey extends Key {\n  constructor() {\n    super(...arguments);\n    this[JWK_MEMBERS]();\n    Object.defineProperty(this, 'kty', {\n      value: 'OKP',\n      enumerable: true\n    });\n\n    if (!OKP_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported OKP key curve');\n    }\n  }\n\n  static get [PUBLIC_MEMBERS]() {\n    return OKP_PUBLIC;\n  }\n\n  static get [PRIVATE_MEMBERS]() {\n    return OKP_PRIVATE;\n  } // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n\n\n  [THUMBPRINT_MATERIAL]() {\n    return {\n      crv: this.crv,\n      kty: 'OKP',\n      x: this.x\n    };\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT]() {\n    return this.algorithms('deriveKey');\n  }\n\n  [KEY_MANAGEMENT_DECRYPT]() {\n    if (this.public) {\n      return new Set();\n    }\n\n    return this.algorithms('deriveKey');\n  }\n\n  static async generate() {\n    let crv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Ed25519';\n    let privat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version');\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`);\n    }\n\n    const {\n      privateKey,\n      publicKey\n    } = await generateKeyPair(crv.toLowerCase());\n    return privat ? privateKey : publicKey;\n  }\n\n  static generateSync() {\n    let crv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Ed25519';\n    let privat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version');\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`);\n    }\n\n    const {\n      privateKey,\n      publicKey\n    } = generateKeyPairSync(crv.toLowerCase());\n    return privat ? privateKey : publicKey;\n  }\n\n}\n\nmodule.exports = OKPKey;","map":{"version":3,"sources":["C:/Users/zhuji/Desktop/heroku_sample/starter/Frontend/node_modules/jose/lib/jwk/key/okp.js"],"names":["generateKeyPairSync","generateKeyPair","async","require","promisify","THUMBPRINT_MATERIAL","JWK_MEMBERS","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","OKP_CURVES","edDSASupported","errors","Key","OKP_PUBLIC","Set","Object","freeze","OKP_PRIVATE","OKPKey","constructor","defineProperty","value","enumerable","has","crv","JOSENotSupported","kty","x","algorithms","public","generate","privat","privateKey","publicKey","toLowerCase","generateSync","module","exports"],"mappings":"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","sourcesContent":["const { generateKeyPairSync, generateKeyPair: async } = require('crypto')\nconst { promisify } = require('util')\n\nconst {\n  THUMBPRINT_MATERIAL, JWK_MEMBERS, PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS, KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts')\nconst { OKP_CURVES } = require('../../registry')\nconst { edDSASupported } = require('../../help/runtime_support')\nconst errors = require('../../errors')\n\nconst Key = require('./base')\n\nconst generateKeyPair = promisify(async)\n\nconst OKP_PUBLIC = new Set(['crv', 'x'])\nObject.freeze(OKP_PUBLIC)\nconst OKP_PRIVATE = new Set([...OKP_PUBLIC, 'd'])\nObject.freeze(OKP_PRIVATE)\n\n// Octet string key pairs Key Type\nclass OKPKey extends Key {\n  constructor (...args) {\n    super(...args)\n    this[JWK_MEMBERS]()\n    Object.defineProperty(this, 'kty', { value: 'OKP', enumerable: true })\n    if (!OKP_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported OKP key curve')\n    }\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return OKP_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return OKP_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    return { crv: this.crv, kty: 'OKP', x: this.x }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return this.algorithms('deriveKey')\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    if (this.public) {\n      return new Set()\n    }\n    return this.algorithms('deriveKey')\n  }\n\n  static async generate (crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version')\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`)\n    }\n\n    const { privateKey, publicKey } = await generateKeyPair(crv.toLowerCase())\n\n    return privat ? privateKey : publicKey\n  }\n\n  static generateSync (crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version')\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`)\n    }\n\n    const { privateKey, publicKey } = generateKeyPairSync(crv.toLowerCase())\n\n    return privat ? privateKey : publicKey\n  }\n}\n\nmodule.exports = OKPKey\n"]},"metadata":{},"sourceType":"script"}