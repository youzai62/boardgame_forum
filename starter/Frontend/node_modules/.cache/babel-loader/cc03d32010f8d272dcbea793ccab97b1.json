{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zhuji\\\\Desktop\\\\heroku_sample\\\\starter\\\\Frontend\\\\src\\\\components\\\\PostView.js\";\nimport React, { Component } from 'react';\nimport '../css/App.css';\nimport Post from './Post';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass PostsView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPosts = () => {\n      $.ajax({\n        url: \"/posts?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            posts: result.posts,\n            totalPosts: result.total_posts\n          });\n        },\n        error: error => {\n          alert('Unable to load posts. Please try your request again');\n        }\n      });\n    };\n\n    this.getPost = () => {\n      $.ajax({\n        url: \"/posts?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            posts: result.posts,\n            totalPosts: result.total_posts\n          });\n        },\n        error: error => {\n          alert('Unable to load posts. Please try your request again');\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: \"/posts/result\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            posts: result.posts,\n            totalPosts: result.total_posts\n          });\n        },\n        error: error => {\n          alert('Unable to load posts. Please try your request again');\n        }\n      });\n    };\n\n    this.getAction = id => action => {\n      if (action === 'GET') {\n        $.ajax({\n          url: \"/posts/\".concat(id),\n          //TODO: update request URL\n          type: \"GET\",\n          success: result => {\n            this.getPosts();\n          },\n          error: error => {\n            alert('Unable to load posts. Please try your request again');\n          }\n        });\n      }\n    };\n\n    this.deleteAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the post?')) {\n          $.ajax({\n            url: \"/posts/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getPosts();\n            },\n            error: error => {\n              alert('Unable to load posts. Please try your request again');\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      posts: [],\n      page: 1,\n      totalPosts: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getPosts();\n  } //Get all posts\n\n\n  //Select speicific page\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getPosts());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalPosts / 15);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  } //Search Post\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"posts-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"search bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"posts-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Posts\"), this.state.posts.map((p, ind) => React.createElement(Post, {\n      key: p.id,\n      subject: p.subject,\n      getAction: this.getAction(p.id),\n      deleteAction: this.deleteAction(p.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.createPagination())));\n  }\n\n}\n\nexport default PostView;","map":{"version":3,"sources":["C:\\Users\\zhuji\\Desktop\\heroku_sample\\starter\\Frontend\\src\\components\\PostView.js"],"names":["React","Component","Post","Search","$","PostsView","constructor","props","getPosts","ajax","url","state","page","type","success","result","setState","posts","totalPosts","total_posts","error","alert","getPost","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","getAction","id","action","deleteAction","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map","p","ind","subject","PostView"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport '../css/App.css';\r\nimport Post from './Post';\r\nimport Search from './Search';\r\nimport $ from 'jquery';\r\n\r\nclass PostsView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n      page: 1,\r\n      totalPosts: 0\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPosts();\r\n  }\r\n\r\n  //Get all posts\r\n  getPosts = () => {\r\n    $.ajax({\r\n      url: `/posts?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          posts: result.posts,\r\n          totalPosts: result.total_posts,\r\n        })\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load posts. Please try your request again')\r\n      }\r\n    })\r\n  }\r\n\r\n  getPost = () => {\r\n    $.ajax({\r\n      url: `/posts?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          posts: result.posts,\r\n          totalPosts: result.total_posts,\r\n        })\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load posts. Please try your request again')\r\n      }\r\n    })\r\n  }\r\n\r\n  //Select speicific page\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => this.getPosts());\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalPosts / 15)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  //Search Post\r\n  submitSearch = (searchTerm) => {\r\n    $.ajax({\r\n      url: `/posts/result`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({searchTerm: searchTerm}),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          posts: result.posts,\r\n          totalPosts: result.total_posts\r\n        })\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load posts. Please try your request again')\r\n      }\r\n    })\r\n  }\r\n\r\n  //Retrive specific post\r\n  getAction = (id) =>  (action) => {\r\n    if(action === 'GET') {\r\n      $.ajax({\r\n        url: `/posts/${id}`, //TODO: update request URL\r\n        type: \"GET\",\r\n        success: (result) => {\r\n          this.getPosts();\r\n        },\r\n        error: (error) => {\r\n          alert('Unable to load posts. Please try your request again')\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  //Delete a specific post\r\n  deleteAction = (id) => (action) => {\r\n    if(action === 'DELETE') {\r\n      if(window.confirm('are you sure you want to delete the post?')) {\r\n        $.ajax({\r\n          url: `/posts/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: (result) => {\r\n            this.getPosts();\r\n          },\r\n          error: (error) => {\r\n            alert('Unable to load posts. Please try your request again')\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"posts-view\">\r\n        <div className=\"search bar\">\r\n          <Search submitSearch={this.submitSearch}/>\r\n        </div>\r\n        <div className=\"posts-list\">\r\n          <h2>Posts</h2>\r\n          {this.state.posts.map((p, ind) => (\r\n            <Post\r\n              key={p.id}\r\n              subject={p.subject}\r\n              getAction={this.getAction(p.id)}\r\n              deleteAction={this.deleteAction(p.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">\r\n            {this.createPagination()}\r\n          </div>\r\n        </div> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostView;"]},"metadata":{},"sourceType":"module"}