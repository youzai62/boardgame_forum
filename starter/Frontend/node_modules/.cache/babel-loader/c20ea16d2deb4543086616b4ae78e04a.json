{"ast":null,"code":"const logger = require('debug')('jwks');\n\nconst {\n  RateLimiter\n} = require('limiter');\n\nconst JwksRateLimitError = require('../errors/JwksRateLimitError');\n\nfunction rateLimitWrapper(client, _ref) {\n  let {\n    jwksRequestsPerMinute = 10\n  } = _ref;\n  const getSigningKey = client.getSigningKey.bind(client);\n  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\n  logger(`Configured rate limiting to JWKS endpoint at ${jwksRequestsPerMinute}/minute`);\n  return async kid => await new Promise((resolve, reject) => {\n    limiter.removeTokens(1, async (err, remaining) => {\n      if (err) {\n        reject(err);\n      }\n\n      logger('Requests to the JWKS endpoint available for the next minute:', remaining);\n\n      if (remaining < 0) {\n        logger('Too many requests to the JWKS endpoint');\n        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\n      } else {\n        try {\n          const key = await getSigningKey(kid);\n          resolve(key);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  });\n}\n\nmodule.exports.default = rateLimitWrapper;","map":{"version":3,"sources":["C:/Users/zhuji/Desktop/heroku_sample/starter/Frontend/node_modules/jwks-rsa/src/wrappers/rateLimit.js"],"names":["logger","require","RateLimiter","JwksRateLimitError","rateLimitWrapper","client","jwksRequestsPerMinute","getSigningKey","bind","limiter","kid","Promise","resolve","reject","removeTokens","err","remaining","key","error","module","exports","default"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,MAAjB,CAAf;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,SAAD,CAA/B;;AAEA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,8BAAD,CAAlC;;AAEA,SAASG,gBAAT,CAA0BC,MAA1B,QAAkE;AAAA,MAAhC;AAAEC,IAAAA,qBAAqB,GAAG;AAA1B,GAAgC;AAChE,QAAMC,aAAa,GAAGF,MAAM,CAACE,aAAP,CAAqBC,IAArB,CAA0BH,MAA1B,CAAtB;AAEA,QAAMI,OAAO,GAAG,IAAIP,WAAJ,CAAgBI,qBAAhB,EAAuC,QAAvC,EAAiD,IAAjD,CAAhB;AACAN,EAAAA,MAAM,CAAE,gDAA+CM,qBAAsB,SAAvE,CAAN;AAEA,SAAO,MAAOI,GAAP,IAAe,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3DJ,IAAAA,OAAO,CAACK,YAAR,CAAqB,CAArB,EAAwB,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;AAChD,UAAID,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD;;AAEDf,MAAAA,MAAM,CAAC,8DAAD,EAAiEgB,SAAjE,CAAN;;AACA,UAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjBhB,QAAAA,MAAM,CAAC,wCAAD,CAAN;AACAa,QAAAA,MAAM,CAAC,IAAIV,kBAAJ,CAAuB,wCAAvB,CAAD,CAAN;AACD,OAHD,MAGO;AACL,YAAI;AACF,gBAAMc,GAAG,GAAG,MAAMV,aAAa,CAACG,GAAD,CAA/B;AACAE,UAAAA,OAAO,CAACK,GAAD,CAAP;AACD,SAHD,CAGE,OAAOC,KAAP,EAAc;AACdL,UAAAA,MAAM,CAACK,KAAD,CAAN;AACD;AACF;AACF,KAjBD;AAkBD,GAnB2B,CAA5B;AAoBD;;AAEDC,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBjB,gBAAzB","sourcesContent":["const logger = require('debug')('jwks');\nconst { RateLimiter } = require('limiter');\n\nconst JwksRateLimitError = require('../errors/JwksRateLimitError');\n\nfunction rateLimitWrapper(client, { jwksRequestsPerMinute = 10 }) {\n  const getSigningKey = client.getSigningKey.bind(client);\n\n  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\n  logger(`Configured rate limiting to JWKS endpoint at ${jwksRequestsPerMinute}/minute`);\n\n  return async (kid) => await new Promise((resolve, reject) => {\n    limiter.removeTokens(1, async (err, remaining) => {\n      if (err) {\n        reject(err);\n      }\n\n      logger('Requests to the JWKS endpoint available for the next minute:', remaining);\n      if (remaining < 0) {\n        logger('Too many requests to the JWKS endpoint');\n        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\n      } else {\n        try {\n          const key = await getSigningKey(kid);\n          resolve(key);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  });\n}\n\nmodule.exports.default = rateLimitWrapper;\n"]},"metadata":{},"sourceType":"script"}