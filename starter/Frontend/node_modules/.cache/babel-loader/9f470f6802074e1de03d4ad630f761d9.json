{"ast":null,"code":"const {\n  sign: signOneShot,\n  verify: verifyOneShot\n} = require('crypto');\n\nconst {\n  KEYOBJECT\n} = require('../help/consts');\n\nconst {\n  edDSASupported\n} = require('../help/runtime_support');\n\nconst sign = (_ref, payload) => {\n  let {\n    [KEYOBJECT]: keyObject\n  } = _ref;\n\n  if (typeof payload === 'string') {\n    payload = Buffer.from(payload);\n  }\n\n  return signOneShot(undefined, payload, keyObject);\n};\n\nconst verify = (_ref2, payload, signature) => {\n  let {\n    [KEYOBJECT]: keyObject\n  } = _ref2;\n  return verifyOneShot(undefined, payload, keyObject, signature);\n};\n\nmodule.exports = (JWA, JWK) => {\n  if (edDSASupported) {\n    JWA.sign.set('EdDSA', sign);\n    JWA.verify.set('EdDSA', verify);\n\n    JWK.OKP.sign.EdDSA = key => key.private && JWK.OKP.verify.EdDSA(key);\n\n    JWK.OKP.verify.EdDSA = key => (key.use === 'sig' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('ed');\n  }\n};","map":{"version":3,"sources":["C:/Users/zhuji/Desktop/heroku_sample/starter/Frontend/node_modules/jose/lib/jwa/eddsa.js"],"names":["sign","signOneShot","verify","verifyOneShot","require","KEYOBJECT","edDSASupported","payload","keyObject","Buffer","from","undefined","signature","module","exports","JWA","JWK","set","OKP","EdDSA","key","private","use","asymmetricKeyType","startsWith"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,IAAI,EAAEC,WAAR;AAAqBC,EAAAA,MAAM,EAAEC;AAA7B,IAA+CC,OAAO,CAAC,QAAD,CAA5D;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,yBAAD,CAAlC;;AAEA,MAAMJ,IAAI,GAAG,OAA6BO,OAA7B,KAAyC;AAAA,MAAxC;AAAE,KAACF,SAAD,GAAaG;AAAf,GAAwC;;AACpD,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAGE,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAV;AACD;;AACD,SAAON,WAAW,CAACU,SAAD,EAAYJ,OAAZ,EAAqBC,SAArB,CAAlB;AACD,CALD;;AAOA,MAAMN,MAAM,GAAG,QAA6BK,OAA7B,EAAsCK,SAAtC,KAAoD;AAAA,MAAnD;AAAE,KAACP,SAAD,GAAaG;AAAf,GAAmD;AACjE,SAAOL,aAAa,CAACQ,SAAD,EAAYJ,OAAZ,EAAqBC,SAArB,EAAgCI,SAAhC,CAApB;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,MAAIV,cAAJ,EAAoB;AAClBS,IAAAA,GAAG,CAACf,IAAJ,CAASiB,GAAT,CAAa,OAAb,EAAsBjB,IAAtB;AACAe,IAAAA,GAAG,CAACb,MAAJ,CAAWe,GAAX,CAAe,OAAf,EAAwBf,MAAxB;;AACAc,IAAAA,GAAG,CAACE,GAAJ,CAAQlB,IAAR,CAAamB,KAAb,GAAqBC,GAAG,IAAIA,GAAG,CAACC,OAAJ,IAAeL,GAAG,CAACE,GAAJ,CAAQhB,MAAR,CAAeiB,KAAf,CAAqBC,GAArB,CAA3C;;AACAJ,IAAAA,GAAG,CAACE,GAAJ,CAAQhB,MAAR,CAAeiB,KAAf,GAAuBC,GAAG,IAAI,CAACA,GAAG,CAACE,GAAJ,KAAY,KAAZ,IAAqBF,GAAG,CAACE,GAAJ,KAAYX,SAAlC,KAAgDS,GAAG,CAACZ,SAAJ,CAAce,iBAAd,CAAgCC,UAAhC,CAA2C,IAA3C,CAA9E;AACD;AACF,CAPD","sourcesContent":["const { sign: signOneShot, verify: verifyOneShot } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst { edDSASupported } = require('../help/runtime_support')\n\nconst sign = ({ [KEYOBJECT]: keyObject }, payload) => {\n  if (typeof payload === 'string') {\n    payload = Buffer.from(payload)\n  }\n  return signOneShot(undefined, payload, keyObject)\n}\n\nconst verify = ({ [KEYOBJECT]: keyObject }, payload, signature) => {\n  return verifyOneShot(undefined, payload, keyObject, signature)\n}\n\nmodule.exports = (JWA, JWK) => {\n  if (edDSASupported) {\n    JWA.sign.set('EdDSA', sign)\n    JWA.verify.set('EdDSA', verify)\n    JWK.OKP.sign.EdDSA = key => key.private && JWK.OKP.verify.EdDSA(key)\n    JWK.OKP.verify.EdDSA = key => (key.use === 'sig' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('ed')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}