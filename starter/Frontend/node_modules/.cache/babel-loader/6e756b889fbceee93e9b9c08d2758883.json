{"ast":null,"code":"const {\n  ArgumentError\n} = require('../errors');\n\nconst {\n  JwksClient\n} = require('../JwksClient');\n\nconst supportedAlg = require('./config');\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  } // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n\n\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n\n  const expressJwt7Provider = async (req, token) => {\n    if (!token) {\n      return;\n    }\n\n    const header = token.header;\n\n    if (!header || !supportedAlg.includes(header.alg)) {\n      return;\n    }\n\n    try {\n      const key = await client.getSigningKey(header.kid);\n      return key.publicKey || key.rsaPublicKey;\n    } catch (err) {\n      return new Promise((resolve, reject) => {\n        onError(err, newError => {\n          if (!newError) {\n            return resolve();\n          }\n\n          reject(newError);\n        });\n      });\n    }\n  };\n\n  return function secretProvider(req, header, payload, cb) {\n    //This function has 4 parameters to make it work with express-jwt@6\n    //but it also supports express-jwt@7 which only has 2.\n    if (arguments.length === 4) {\n      expressJwt7Provider(req, {\n        header\n      }).then(key => {\n        setImmediate(cb, null, key);\n      }).catch(err => {\n        setImmediate(cb, err);\n      });\n      return;\n    }\n\n    return expressJwt7Provider(req, arguments[1]);\n  };\n};","map":{"version":3,"sources":["C:/Users/zhuji/Desktop/heroku_sample/starter/Frontend/node_modules/jwks-rsa/src/integrations/express.js"],"names":["ArgumentError","require","JwksClient","supportedAlg","handleSigningKeyError","err","cb","name","module","exports","expressJwtSecret","options","undefined","client","onError","expressJwt7Provider","req","token","header","includes","alg","key","getSigningKey","kid","publicKey","rsaPublicKey","Promise","resolve","reject","newError","secretProvider","payload","arguments","length","then","setImmediate","catch"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,WAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,eAAD,CAA9B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,UAAD,CAA5B;;AAEA,MAAMG,qBAAqB,GAAG,CAACC,GAAD,EAAMC,EAAN,KAAa;AACzC;AACA,MAAID,GAAG,IAAIA,GAAG,CAACE,IAAJ,KAAa,yBAAxB,EAAmD;AACjD,WAAOD,EAAE,CAAC,IAAD,CAAT;AACD,GAJwC,CAMzC;;;AACA,MAAID,GAAJ,EAAS;AACP,WAAOC,EAAE,CAACD,GAAD,CAAT;AACD;AACF,CAVD;;AAYAG,MAAM,CAACC,OAAP,CAAeC,gBAAf,GAAkC,UAAUC,OAAV,EAAmB;AACnD,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKC,SAApC,EAA+C;AAC7C,UAAM,IAAIZ,aAAJ,CAAkB,uEAAlB,CAAN;AACD;;AAED,QAAMa,MAAM,GAAG,IAAIX,UAAJ,CAAeS,OAAf,CAAf;AACA,QAAMG,OAAO,GAAGH,OAAO,CAACP,qBAAR,IAAiCA,qBAAjD;;AAEA,QAAMW,mBAAmB,GAAG,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAChD,QAAI,CAACA,KAAL,EAAY;AAAE;AAAS;;AACvB,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;;AACA,QAAI,CAACA,MAAD,IAAW,CAACf,YAAY,CAACgB,QAAb,CAAsBD,MAAM,CAACE,GAA7B,CAAhB,EAAmD;AACjD;AACD;;AACD,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMR,MAAM,CAACS,aAAP,CAAqBJ,MAAM,CAACK,GAA5B,CAAlB;AACA,aAAOF,GAAG,CAACG,SAAJ,IAAiBH,GAAG,CAACI,YAA5B;AACD,KAHD,CAGE,OAAOpB,GAAP,EAAY;AACZ,aAAO,IAAIqB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCd,QAAAA,OAAO,CAACT,GAAD,EAAOwB,QAAD,IAAc;AACzB,cAAI,CAACA,QAAL,EAAe;AAAE,mBAAOF,OAAO,EAAd;AAAmB;;AACpCC,UAAAA,MAAM,CAACC,QAAD,CAAN;AACD,SAHM,CAAP;AAID,OALM,CAAP;AAMD;AACF,GAjBD;;AAmBA,SAAO,SAASC,cAAT,CAAwBd,GAAxB,EAA6BE,MAA7B,EAAqCa,OAArC,EAA8CzB,EAA9C,EAAkD;AACvD;AACA;AACA,QAAI0B,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BlB,MAAAA,mBAAmB,CAACC,GAAD,EAAM;AAAEE,QAAAA;AAAF,OAAN,CAAnB,CACGgB,IADH,CACQb,GAAG,IAAI;AACXc,QAAAA,YAAY,CAAC7B,EAAD,EAAK,IAAL,EAAWe,GAAX,CAAZ;AACD,OAHH,EAGKe,KAHL,CAGW/B,GAAG,IAAI;AACd8B,QAAAA,YAAY,CAAC7B,EAAD,EAAKD,GAAL,CAAZ;AACD,OALH;AAOA;AACD;;AAED,WAAOU,mBAAmB,CAACC,GAAD,EAAMgB,SAAS,CAAC,CAAD,CAAf,CAA1B;AACD,GAfD;AAgBD,CA3CD","sourcesContent":["const { ArgumentError } = require('../errors');\nconst { JwksClient } = require('../JwksClient');\nconst supportedAlg = require('./config');\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  }\n\n  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n\n  const expressJwt7Provider = async (req, token) => {\n    if (!token) { return; }\n    const header = token.header;\n    if (!header || !supportedAlg.includes(header.alg)) {\n      return;\n    }\n    try {\n      const key = await client.getSigningKey(header.kid);\n      return key.publicKey || key.rsaPublicKey;\n    } catch (err) {\n      return new Promise((resolve, reject) => {\n        onError(err, (newError) => {\n          if (!newError) { return resolve(); }\n          reject(newError);\n        });\n      });\n    }\n  };\n\n  return function secretProvider(req, header, payload, cb) {\n    //This function has 4 parameters to make it work with express-jwt@6\n    //but it also supports express-jwt@7 which only has 2.\n    if (arguments.length === 4) {\n      expressJwt7Provider(req, { header })\n        .then(key => {\n          setImmediate(cb, null, key);\n        }).catch(err => {\n          setImmediate(cb, err);\n        });\n\n      return;\n    }\n\n    return expressJwt7Provider(req, arguments[1]);\n  };\n};\n"]},"metadata":{},"sourceType":"script"}